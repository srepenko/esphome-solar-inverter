substitutions:
  name: septic-tank
  friendly_name: septic_tank
  device_description: "Septic Tank Level"

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.6.0
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# ‚¨áÔ∏è –î–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
logger:
  level: DEBUG

api:
  encryption:
    key: "+lWI3+2o22duv581AzG58JUVv2BLz/RwkaeO++GiU3o="

ota:
  - platform: esphome
    password: "ff0f994b0a300f8c00108d94b64f4457"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Septic-Tank Fallback"
    password: "DFiB8RjlKBvp"

captive_portal:

web_server:
  port: 80

uart:
  tx_pin: GPIO2
  rx_pin: GPIO1
  baud_rate: 9600
  debug:
    direction: BOTH

sensor:
  - platform: jsn_sr04t
    name: "Raw Septic Distance"
    id: raw_ultrasonic
    update_interval: 1s
    #model: aj_sr04m
#    filters:
#      - clamp:
#          min_value: 0.25
#          max_value: 3.0
#          ignore_out_of_range: true
#      - median:
#          window_size: 7
#          send_every: 3
#      - sliding_window_moving_average:
#          window_size: 5
#          send_every: 1
#          send_first_at: 1
    filters:
      - clamp:
         min_value: 0.4
         max_value: 3.0
         ignore_out_of_range: true
      - sliding_window_moving_average:
         window_size: 5
         send_every: 3 # TODO slow down to 10sec
         send_first_at: 3
      # –£–¥–∞–ª—ë–Ω —Ñ–∏–ª—å—Ç—Ä delta, –æ–Ω –º–µ—à–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
    unit_of_measurement: "m"

  - platform: template
    name: "Septic Tank Distance"
    id: septic_distance
    unit_of_measurement: "cm"
    update_interval: never  # —É–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
    lambda: |-
      if (isnan(id(raw_ultrasonic).state)) return NAN;
      float result = id(raw_ultrasonic).state * 100.0;
      ESP_LOGD("septic_distance", "Raw to CM: %.2f", result);
      return round(result);
    on_value:
      then:
        - component.update: septic_fill
        - component.update: septic_status

  - platform: template
    name: "Septic Tank Fill Level"
    id: septic_fill
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      float level = id(septic_distance).state;
      float empty = id(empty_level_num).state;
      float full = id(full_level_num).state;

      ESP_LOGD("septic_fill", "Distance=%.2f, Empty=%.2f, Full=%.2f", level, empty, full);

      if (isnan(level) || isnan(empty) || isnan(full)) return NAN;
      if (level > empty) return 0.0;
      if (level < full) return 100.0;

      return round((1.0 - (level - full) / (empty - full)) * 100.0);

text_sensor:
  - platform: template
    name: "Septic Tank Status"
    id: septic_status
    update_interval: never
    lambda: |-
      float level = id(septic_fill).state;
      ESP_LOGD("septic_status", "Level=%.1f", level);

      if (isnan(level)) return {"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"};
      if (level < 50.0) return {"‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"};
      if (level < 85.0) return {"‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"};
      if (level < 98.0) return {"üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"};
      return {"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å!"};

binary_sensor:
  - platform: template
    name: "Septic Full Alert"
    id: septic_alert
    device_class: problem
    lambda: 'return id(septic_fill).state >= 98.0;'

light:
  - platform: binary
    name: "Septic Indicator LED"
    output: septic_led
    id: septic_light
    on_turn_on:
      - delay: 500ms
      - light.turn_off: septic_light

output:
  - platform: gpio
    pin: GPIO8
    id: septic_led

button:
  - platform: template
    name: "üìè –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –£–†–û–í–ï–ù–¨ –ü–£–°–¢–û"
    on_press:
      then:
        - lambda: |-
            float val = id(raw_ultrasonic).state * 100.0;
            ESP_LOGI("calibration", "–£—Ä–æ–≤–µ–Ω—å –ü–£–°–¢–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %.1f —Å–º", val);
            id(empty_level_num).publish_state(val);

  - platform: template
    name: "üìè –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –£–†–û–í–ï–ù–¨ –ü–û–õ–ù–û"
    on_press:
      then:
        - lambda: |-
            float val = id(raw_ultrasonic).state * 100.0;
            ESP_LOGI("calibration", "–£—Ä–æ–≤–µ–Ω—å –ü–û–õ–ù–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %.1f —Å–º", val);
            id(full_level_num).publish_state(val);

number:
  - platform: template
    name: "üìÄ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ü–û–õ–ù–û"
    id: full_level_num
    optimistic: true
    restore_value: true
    min_value: 25
    max_value: 50
    step: 1
    initial_value: 30

  - platform: template
    name: "üìÄ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ü–£–°–¢–û"
    id: empty_level_num
    optimistic: true
    restore_value: true
    min_value: 100
    max_value: 300
    step: 1
    initial_value: 200

# üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏
interval:
  - interval: 3s
    then:
      - component.update: septic_distance
