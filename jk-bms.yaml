substitutions:
  name: jk-bms-rj485
  esp_name: esp-rs485-gw
  bms0_name: jk-bms0
  device_description: "Monitor JK-BMS via RS485 internal"
  tx_pin_uart_0: GPIO21 #GPIO1 #GPIO16
  rx_pin_uart_0: GPIO20 #GPIO3 #GPIO17
  talk_pin_rs485: GPIO7

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.6.0
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

external_components:
  - source:
      type: local
      path: custom_components/jk_uart_bms
  
esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  - platform: esphome
    password: "e72603f06381a45911d8386b7c5e08b8"

logger:
  level: DEBUG
  #baud_rate: 0  # отключает лог через UART0

api:
  encryption:
    key: "UGrQLQDzFt7T0VdtF1ayiNWa12y5s/wMPF8w3lEberE="
    
web_server:

uart:
  id: uart_0
  baud_rate: 115200
  stop_bits: 1
  parity: NONE
  tx_pin: GPIO21
  rx_pin: GPIO20
#    rx_buffer_size: 500
#    tx_pin: ${tx_pin_uart_0}
#    rx_pin: ${rx_pin_uart_0}

output:
  - platform: gpio
    id: rs485_dir
    pin: 7

jk_uart_bms:
  id: jk_uart_bms0
  uart_id:  uart_0
  dir_pin: rs485_dir

button:
  - platform: template
    name: "BMS Test Command 1"
    on_press:
      then:
        - lambda: |-
            id(jk_uart_bms0).send_custom_cmd_test1();

  - platform: template
    name: "BMS Test Command 2"
    on_press:
      then:
        - lambda: |-
            id(jk_uart_bms0).send_custom_cmd_test2();
