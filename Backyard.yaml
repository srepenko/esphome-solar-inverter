esphome:
  name: backyard
  
esp8266:
  board: esp12e
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Backyard"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "sashka2005"

i2c:
  - id: bus_a
    sda: 5
    scl: 4
    scan: True

ota:
  - platform: esphome
    password: "sashka2005"

web_server:
  port: 80
#  auth:
#    username: admin
#    password: !secret sashka2005
    
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 1"
    on_press:
      - switch.toggle: relay1
  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 2"
    on_press:
      - switch.toggle: relay2

switch:
  - platform: gpio
    name: "Relay 1"
    pin: GPIO12
    id: relay1
  - platform: gpio
    name: "Relay 2"
    pin: GPIO14
    id: relay2
  - platform: gpio
    name: "Siren"
    pin: GPIO13
    id: siren
    
status_led:
  pin:
    number: GPIO15
    inverted: yes


sensor:
  - platform: bme280_i2c
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      id: temperature
    pressure:
      name: "Pressure"
      id: pressure
    humidity:
      name: "Relative Humidity"
      id: humidity
    address: 0x76
    update_interval: 15s
  - platform: template
    name: "Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(pressure).state), 0.190234) - 1); // in meter
    update_interval: 15s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'
  - platform: template
    name: "Absolute Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(temperature).state) /
        (id(temperature).state + 243.5)) * id(humidity).state * mw) /
        ((273.15 + id(temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 15s
    icon: 'mdi:water'
    unit_of_measurement: 'g/m³'
  - platform: template
    name: "Dew Point"
    lambda: return (243.5*(log(id(humidity).state/100)+
      ((17.67*id(temperature).state)/(243.5+id(temperature).state)))/
      (17.67-log(id(humidity).state/100)-((17.67*id(temperature).state)/
      (243.5+id(temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
    
  