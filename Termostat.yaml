esphome:
  name: termostat

esp8266:
  board: esp12e

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "termostat"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "sashka2005"

i2c:
  - id: bus_a
    sda: 5
    scl: 4
    scan: false

ota:
  - platform: esphome
    password: "sashka2005"

web_server:
  port: 80
#  auth:
#    username: admin
#    password: !secret sashka2005
    
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 1"
    on_press:
      - switch.toggle: boiler_relay
  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 2"
    on_press:
      - switch.toggle: floor_heating_relay

switch:
  - platform: gpio
    name: "Boiler Relay"
    pin: GPIO12
    id: boiler_relay
  - platform: gpio
    name: "Floor Heating Relay"
    pin: GPIO14
    id: floor_heating_relay
  - platform: gpio
    name: "Siren"
    pin: GPIO13
    id: siren
    
status_led:
  pin:
    number: GPIO15
    inverted: yes


#sensor:
#  - platform: bme280
#    i2c_id: bus_a
#    temperature:
#      name: "Termostat Temperature"
#      id: termostat_temperature
#    pressure:
#      name: "Termostat Pressure"
#      id: termostat_pressure
#    humidity:
#      name: "Termostat Relative Humidity"
#      id: termostat_humidity
#    address: 0x76
#    update_interval: 15s
#  - platform: template
#    name: "Termostat Altitude"
#    lambda: |-
#      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
#      return ((id(termostat_temperature).state + 273.15) / 0.0065) *
#        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(termostat_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s
#    icon: 'mdi:signal'
#    unit_of_measurement: 'm'
#  - platform: template
#    name: "Termostat Absolute Humidity"
#    lambda: |-
#      const float mw = 18.01534;    // molar mass of water g/mol
#      const float r = 8.31447215;   // Universal gas constant J/mol/K
#      return (6.112 * powf(2.718281828, (17.67 * id(termostat_temperature).state) /
#        (id(termostat_temperature).state + 243.5)) * id(termostat_humidity).state * mw) /
#        ((273.15 + id(termostat_temperature).state) * r); // in grams/m^3
#    accuracy_decimals: 2
#    update_interval: 15s
#    icon: 'mdi:water'
#    unit_of_measurement: 'g/m³'
#  - platform: template
#    name: "Dew Point"
#    lambda: return (243.5*(log(id(termostat_humidity).state/100)+
#      ((17.67*id(termostat_temperature).state)/(243.5+id(termostat_temperature).state)))/
#      (17.67-log(id(termostat_humidity).state/100)-((17.67*id(termostat_temperature).state)/
#      (243.5+id(termostat_temperature).state))));
#    unit_of_measurement: °C
#    icon: 'mdi:thermometer-alert'
    
  