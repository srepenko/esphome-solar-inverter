substitutions:
  name: nice-bust4
  #name: nice-wifi
  device_description: ""
  external_components_source: github://srepenko/Nice_BusT4@main

esphome:
  name: ${name}
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    #type: esp-idf
    

external_components:
  - source: ${external_components_source}
    refresh: 0s
    
# Enable logging
logger:
  level: DEBUG
  #tx_buffer_size: 2048
  baud_rate: 0

ota:
  - platform: esphome
    password: !secret esphome_ota_key
    

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gate Fallback Hotspot"
    password: "rJH9KDSki23h"

captive_portal:

web_server:
  version: 3
#  js_include: "www.js"
#  js_url: ""
#  version: 2  
# Enable Home Assistant API

#uart:
#  id: uart_0
#  baud_rate: 19200
#  tx_pin: GPIO21
#  rx_pin: GPIO20

# Set statul led
status_led:
  pin: 
    number: GPIO8
    inverted: true

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_encryption_key
#  reboot_timeout: 0s # иначе перезагружается при отключении от hassio  
  services:
# для отправки hex команд на привод
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

# распознавание длины створки
  - service: gate_length_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0b","01");

# распознавание устройств BlueBus
  - service: devices_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0a","01");         

# усилие при закрытии
  - service: closing_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4b", force);         

# усилие при открытии
  - service: opening_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4a", force);


# Кнопки для отправки команд
button:
  - platform: template
    name: Пошагово
    id: sbs
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

  - platform: template
    name: Статус входов
    id: in_stat
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_raw_cmd("55.0D.00.03.00.66.08.06.6B.04.D0.99.00.00.4D.0D");

#         nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");
# 55.0E.00.03.00.81.08.07.8D.04.0B.A9.00.01.01.A6.0E поиск положений

  - platform: template
    name: Частичное открытие 1
    id: p_opn1
    on_press:
      lambda: |-
         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);
                      
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::STOP);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::OPEN);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLOSE);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN2);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN3);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN4);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN5);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN6);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLK_OPN);  # Разблокировать и открыть 
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLS_LOCK);  # Закрыть и блокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLCK_CLS); # Разблокировать и Закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::LOCK);      # Блокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLOCK);    # Разблокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_SBS);  # Ведущий SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_OPN);  # Ведущий открыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_CLS);  # Ведущий закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_SBS); # Ведомый SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_OPN); # Ведомый открыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_CLS); # Ведомый закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_ON);   # Автооткрывание активно
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_OFF);  # Автооткрывание неактивно


cover:
- platform: bus_t4
  name: "Nice Cover"
  device_class: gate
  id: nice_cover
#  tx_pin: 43            # S3
#  rx_pin: 44            # S3
  tx_pin: 21             # C3
  rx_pin: 20             # C3
#  address: 0x0003            # адрес привода
#  use_address: 0x0081        # адрес шлюза

# работаем с приёмником OXI

# отключаем автозакрытие ворот, если это нужно для погрузочно-разгрузочных работ
switch:
  - platform: template
    name: "Автозакрытие"
    id: autoclose
    restore_mode: DISABLED
#    optimistic: true
    lambda: |-
      if (nice_cover -> NiceBusT4::autocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                
    turn_off_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                        


              
#script:
#  - id: send_cmd
#    then:
#      - switch.turn_on: my_switch
#      - delay: 1s
#      - switch.turn_off: my_switch              

remote_receiver:
  pin: 
    number: GPIO2
    inverted: True
  dump: 
     - rc_switch
  rmt_channel: 3
  # Settings to optimize recognition of RF devices
  tolerance: 60%
  filter: 4us
  idle: 4ms

binary_sensor:
  - platform: remote_receiver
    name: RF Button 1
    rc_switch_raw: 
      protocol: 6
      code: "000000000001010100010100"
    filters:
      - delayed_off: 250ms
    on_press:
      then:
        cover.open: nice_cover
  - platform: remote_receiver
    name: RF Button 2
    rc_switch_raw: 
      protocol: 6
      code: "000000000001010100010101"
    filters:
      - delayed_off: 250ms
    on_press:
      then:
        cover.close: nice_cover
  - platform: remote_receiver
    name: RF Button 3
    rc_switch_raw: 
      protocol: 6
      code: "000000000001010100010111"
    filters:
      - delayed_off: 250ms